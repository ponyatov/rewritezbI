%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM STR
%token <o> LQ RQ
%token <o> EQ TILD
%token <o> ADD DIV
%type <o> ex scalar list

%left EQ
%left ADD
%left DIV
%left TILD
%%
REPL : | REPL ex { cout << $2->eval()->dump(); } ;
ex : scalar
	| LQ list RQ	{ $$=$2; }
	| TILD ex		{ $$=$1; $$->push($2); }
	| ex EQ ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex ADD ex		{ $$=$2; $$->push($1); $$->push($3); }
	| ex DIV ex		{ $$=$2; $$->push($1); $$->push($3); }
;
scalar : SYM | STR ;
list :				{ $$=new List(); }
	| list ex		{ $$=$1; $$->push($2); }
;
%%